pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                script {
                    def logFilePath = "${env.WORKSPACE}/pipeline-log.log"
                    sh """
                    echo 'Starting Build Stage...' > ${logFilePath}
                    echo 'Building project...' >> ${logFilePath}
                    # Add your build commands here
                    echo 'Build completed.' >> ${logFilePath}
                    """
                }
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                script {
                    def logFilePath = "${env.WORKSPACE}/pipeline-log.log"
                    sh """
                    echo 'Starting Unit and Integration Tests Stage...' >> ${logFilePath}
                    echo 'Performing Unit Testing using JUnit...' >> ${logFilePath}
                    echo 'Performing Integration Testing using Selenium WebDriver...' >> ${logFilePath}
                    # Add your test commands here
                    echo 'Unit and Integration Tests completed.' >> ${logFilePath}
                    """
                }
            }
        }
        stage('Code Analysis') {
            steps {
                script {
                    def logFilePath = "${env.WORKSPACE}/pipeline-log.log"
                    sh """
                    echo 'Starting Code Analysis Stage...' >> ${logFilePath}
                    echo 'Analyzing code...' >> ${logFilePath}
                    # Add your code analysis commands here
                    echo 'Code analysis completed.' >> ${logFilePath}
                    """
                }
            }
        }
        stage('Security Scan') {
            steps {
                script {
                    def logFilePath = "${env.WORKSPACE}/pipeline-log.log"
                    sh """
                    echo 'Starting Security Scan Stage...' >> ${logFilePath}
                    echo 'Performing security scan...' >> ${logFilePath}
                    # Add your security scan commands here
                    echo 'Security scan completed.' >> ${logFilePath}
                    """
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                script {
                    def logFilePath = "${env.WORKSPACE}/pipeline-log.log"
                    sh """
                    echo 'Starting Deployment to Staging Stage...' >> ${logFilePath}
                    echo 'Deploying to staging environment...' >> ${logFilePath}
                    # Add your deployment commands here
                    echo 'Deployment to staging completed.' >> ${logFilePath}
                    """
                }
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                script {
                    def logFilePath = "${env.WORKSPACE}/pipeline-log.log"
                    sh """
                    echo 'Starting Integration Tests on Staging Stage...' >> ${logFilePath}
                    echo 'Running integration tests on staging...' >> ${logFilePath}
                    # Add your integration test commands here
                    echo 'Integration tests on staging completed.' >> ${logFilePath}
                    """
                }
            }
        }
        stage('Deploy to Production') {
            steps {
                script {
                    def logFilePath = "${env.WORKSPACE}/pipeline-log.log"
                    sh """
                    echo 'Starting Deployment to Production Stage...' >> ${logFilePath}
                    echo 'Deploying to production environment...' >> ${logFilePath}
                    # Add your production deployment commands here
                    echo 'Deployment to production completed.' >> ${logFilePath}
                    """
                }
            }
        }
    }
    post {
        success {
            emailext attachmentsPattern: 'pipeline-log.log',
                     body: "Build ${env.BUILD_NUMBER} of ${env.JOB_NAME} was successful.\n\nThe pipeline completed successfully. Please find the attached log file.",
                     subject: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                     to: 'asgaurav9@gmail.com'
        }
        failure {
            emailext attachmentsPattern: 'pipeline-log.log',
                     body: "Build ${env.BUILD_NUMBER} of ${env.JOB_NAME} failed. Please check the attached log file for details.",
                     subject: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                     to: 'asgaurav9@gmail.com'
        }
        always {
            script {
                def logFilePath = "${env.WORKSPACE}/pipeline-log.log"
                sh """
                echo 'Pipeline completed.' >> ${logFilePath}
                """
            }
            echo 'Pipeline completed.'
        }
    }
}
